{
	"info": {
		"_postman_id": "fe5a21df-4273-4656-9ceb-dd0a471fee16",
		"name": "pcms-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "cleanse-testing-environment",
			"item": [
				{
					"name": "set-up-variables",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d2a994ee-f62c-455c-9f7f-30c3e95c1bce",
								"exec": [
									"pm.test(\"should be successful\", function () {\r",
									"    var resJson = pm.response.json();    \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(resJson.token).not.eql(undefined);\r",
									"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14690357-09d2-4135-aebf-1037dbc51f05",
								"exec": [
									"pm.environment.clear();\r",
									"pm.environment.set(\"staffId_secret\", \"admin\");\r",
									"pm.environment.set(\"password_secret\", \"secret\");\r",
									"pm.environment.set(\"otp_secret\", \"019s3cr3t_for_dev_only\");\r",
									"pm.environment.set(\"host\", \"localhost\");\r",
									"pm.environment.set(\"port\", \"3000\");\r",
									"pm.environment.set(\"urlUser\", \"user\");\r",
									"pm.environment.set(\"urlLogin\", \"auth/login\");\r",
									"pm.environment.set(\"urlDeceased\", \"deceased\");\r",
									"pm.environment.set(\"urlCremationWorkflow\", \"cremation-workflow\");\r",
									"pm.environment.set(\"urlCremationWorkflowInfo\", \"cremation-workflow-info\");\r",
									"pm.environment.set(\"urlCollectionWorkflow\", \"collection-workflow\");\r",
									"pm.environment.set(\"urlCollectionWorkflowInfo\", \"collection-workflow-info\");\r",
									"pm.environment.set(\"urlCrematorJob\", \"cremator-job\");\r",
									"pm.environment.set(\"urlCrematorInfo\", \"cremator-info\");\r",
									"pm.environment.set(\"urlGroup\", \"groups\");\r",
									"pm.environment.set(\"urlEPaperJob\", \"e-paper-jobs\");\r",
									"pm.environment.set(\"urlEPaperInfo\", \"e-paper-info\");\r",
									"pm.environment.set(\"urlOneIlsToPcms\", \"one-ils-to-pcms\");\r",
									"pm.environment.set(\"urlHearthInfo\", \"hearth-info\");\r",
									"pm.environment.set(\"urlAgvJob\", \"agv-job\");\r",
									"pm.environment.set(\"urlPrinterJob\", \"printer-job\");\r",
									"pm.environment.set(\"urlPrinterInfo\", \"printer-info\");\r",
									"pm.environment.set(\"urlScannerJob\", \"scanner-job\");\r",
									"pm.environment.set(\"urlScannerInfo\", \"scanner-info\");\r",
									"pm.environment.set(\"urlParkingBayInfo\", \"parking-bay-info\");\r",
									"pm.environment.set(\"urlHearthInfo\", \"hearth-info\");\r",
									"pm.environment.set(\"urlRecipientInfo\", \"recipient-info\");\r",
									"pm.environment.set(\"urlLockerInfo\", \"locker-info\");\r",
									"pm.environment.set(\"urlLockerJob\", \"locker-job\");\r",
									"pm.environment.set(\"urlRoomInfo\", \"room-info\");\r",
									"pm.environment.set(\"urlRoomJob\", \"room-job\");\r",
									"pm.environment.set(\"urlPrintingHistory\", \"printing-history\");\r",
									"pm.environment.set(\"urlButtonInfo\", \"button-info\");\r",
									"pm.environment.set(\"urlButtonJob\", \"button-job\");\r",
									"pm.environment.set(\"urlAgvStation\", \"agv-station\");\r",
									"pm.environment.set(\"urlTvInfo\", \"tv-info\");\r",
									"pm.environment.set(\"urlSystemSetting\", \"system-setting\");\r",
									"\r",
									"pm.environment.set(\"hearthCremainId\", 0);\r",
									"pm.environment.set(\"hearthEmpty1Id\", 0);\r",
									"pm.environment.set(\"hearthEmpty2Id\", 0);\r",
									"pm.environment.set(\"cremationWorkflowId\", 0);\r",
									"pm.environment.set(\"cremationWorkflowInfoId\", 0);\r",
									"pm.environment.set(\"collectionWorkflowId\", 0);\r",
									"pm.environment.set(\"collectionWorkflowInfoId\", 0);\r",
									"pm.environment.set(\"deceasedId\", 0);\r",
									"pm.environment.set(\"crematorId\", 0);\r",
									"pm.environment.set(\"crematorJobId\", 0);\r",
									"pm.environment.set(\"ePaperJobId\", 0);\r",
									"pm.environment.set(\"ePaperId\", 0);\r",
									"pm.environment.set(\"agvJobId\", 0);\r",
									"pm.environment.set(\"agvStationId\", 0);\r",
									"pm.environment.set(\"printerJobId\", 0);\r",
									"pm.environment.set(\"printerId\", 0);\r",
									"pm.environment.set(\"printingHistoryId\", 0);\r",
									"pm.environment.set(\"scannerJobId\", 0);\r",
									"pm.environment.set(\"scannerId\", 0);\r",
									"pm.environment.set(\"parkingBayId\", 0);\r",
									"pm.environment.set(\"userId\", 0);\r",
									"pm.environment.set(\"groupId\", 0);\r",
									"pm.environment.set(\"buttonJobId\", 0);\r",
									"pm.environment.set(\"buttonId\", 0);\r",
									"pm.environment.set(\"lockerJobId\", 0);\r",
									"pm.environment.set(\"lockerId\", 0);\r",
									"pm.environment.set(\"recipientId\", 0);\r",
									"pm.environment.set(\"roomId\", 0);\r",
									"pm.environment.set(\"systemSettingId\", 0);\r",
									"pm.environment.set(\"tvId\", 0);\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLogin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "984a122e-e010-48e0-ae0b-b5dcc42c5c4b",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlUser\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all users', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfUsers = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfUsers.length; i++) {",
									"        pm.test(`delete successfully user id ${listOfUsers[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfUsers[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51dd7304-5c3f-4821-8cde-7fe966be122b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "82835d1c-2eee-49bc-b442-3660d6a3f408",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlGroup\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all groups', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfUsers = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfUsers.length; i++) {",
									"        pm.test(`delete successfully group id ${listOfUsers[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfUsers[i].id), (error, response) => {                ",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f578f37c-9d69-45b6-89fd-642949cefdb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlGroup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-deceased",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6422c8df-8bcd-4259-b403-66aaf60cbb55",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlDeceased\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all deceased', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully deceased id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0fb47dff-7c61-4477-859b-afbd865c9cfa",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlDeceased}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlDeceased}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-cremator-jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fedde4ba-fb83-4838-93e7-34f5acc1198b",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlCrematorJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all cremator jobs', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully cremator job id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;     ",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ad67f5e5-0a16-48b3-ae36-30328dd02556",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCrematorJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-cremator-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d93d6189-e971-43be-9e6f-e5cfb96e527a",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlCrematorInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all cremator info', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully cremator info id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a2e73973-a16c-4631-8d53-c8d198dd8cb1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCrematorInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-cremation-workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a27bd1a9-4664-45b3-8797-a364e4342e98",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlCremationWorkflow\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all items', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully item id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5fbd95b9-3820-4c2f-afb5-167bee890018",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCremationWorkflow}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-cremation-workflow-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17094200-0a3e-42ca-836f-b252512044fa",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlCremationWorkflowInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all items', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully item id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cf51b6f6-0e69-4c68-8bfb-1eeac9bb7a54",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCremationWorkflowInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-collection-workflow",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9bcac95-4d54-4303-bac8-4c88e267f655",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlCollectionWorkflow\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all items', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully item id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e4fb557b-74ac-4c1b-ac33-2f47421e9b7e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflow}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCollectionWorkflow}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-collection-workflow-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2367e6f-a5c9-4f26-8d88-60d9a1de703a",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlCollectionWorkflowInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all items', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully item id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f41cb43-0056-4bff-a298-ca41588ff0d5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCollectionWorkflowInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-e-paper-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbe236ba-4eab-4126-9161-325a1f0e8752",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlEPaperInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3c9f52d3-a32d-4992-b4b6-c160e31e9fea",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlEPaperInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlEPaperInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-e-paper-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b35d203e-c25e-41fd-9fb5-5d9c77b17391",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlEPaperJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7fe33ae6-c5fb-4a86-bc69-2e405ac0dccc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlEPaperJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-OneIlsToPcms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9ff9848-e9f3-4321-984f-73c9999d110c",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlOneIlsToPcms\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb0a17a7-7d41-4b07-9674-54048fb84443",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlOneIlsToPcms}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlOneIlsToPcms}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-hearth-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f592fd3f-96cf-44f2-8957-74c026d4fa9b",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlHearthInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8b6c64ff-9466-45f3-94ea-5c8544b8f50d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlHearthInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-agv-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4bb842b-d2cd-49bc-a9bd-ef6c17a07b8e",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlAgvJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a71d0477-0c65-4e02-a7c7-9344604572a1",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlAgvJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-printer-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43887e06-692a-4f9c-ac7e-b2403f107c60",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlPrinterJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fc1bb938-cec4-44cf-9637-436ece1f8b3d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlPrinterJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-printer-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c65e30b5-ac89-41c8-bf97-4d7417bfa45a",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlPrinterInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "82a5da2d-8ec5-433c-a487-07135ea06bb2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlPrinterInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlPrinterInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-scanner-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "103217c4-3e57-452e-bdbf-ed83e9f6e4ff",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlScannerJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b331a4ff-b0b7-425b-b970-100634f4a77f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlScannerJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-scanner-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bd564e5-0b44-4bb7-ab84-82d3ea182f48",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlScannerInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "112a7f7b-0a22-44c1-b22b-c86304b9e035",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlScannerInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlScannerInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-recipient-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c01f29e8-e00c-4dff-ab9b-a1b44ad8ef58",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlRecipientInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "61ca66c0-fcb8-4d7e-8526-e8b38a42cb1f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlRecipientInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlRecipientInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-locker-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5177c41a-0f2a-4501-9fe9-28318918a33f",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlLockerInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "96f1f3db-6a32-4e0b-a879-b0ae959215c9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLockerInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLockerInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-locker-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "927cbc97-4db4-40c0-b16e-6de3edc1e23a",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlLockerJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8496d2c1-3a65-4709-a6f9-fb083aefe64a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLockerJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-parking-bay-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dffb14d-167f-4ee1-8165-633f245d0842",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlParkingBayInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "7beefae3-d03f-49c0-822a-e188f0735cdf",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlParkingBayInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlParkingBayInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-room-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "edc85848-b657-4c7a-9800-93a2d3f99d8f",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlRoomInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e40e539-083d-461c-9f14-72ed1bd1bf29",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlRoomInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlRoomInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-room-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "919ece4f-9945-435a-9e0e-adbd84e15dc3",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlRoomJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1555e5e7-91da-4594-b524-30de0ad6680d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlRoomJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-button-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f04f9be-9dae-47c1-ae07-866346ce0b57",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlButtonInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "eb96ebd4-56f3-4f54-aff1-51ed4be4a805",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlButtonInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlButtonInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-button-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b747cd2a-c9f7-4966-bb77-fe1454eeb620",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlButtonJob\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8fa31d24-8e26-4e0b-891d-f2ee3f9fd846",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlButtonJob}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlButtonJob}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-agv-station",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7c044e4-e52b-4997-b3b5-51904442216b",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlAgvStation\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e31dba73-cc05-49ed-b823-fb36f928808c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlAgvStation}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlAgvStation}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-tv-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1512b2c-1980-4157-9f47-62c2c13bbcab",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlTvInfo\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "069438fd-1ea7-4c8a-94bc-17010f1294b7",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlTvInfo}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlTvInfo}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "delete-all-items-in-system-setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4706c188-5265-4eb8-b96c-46b2a00a5d4a",
								"exec": [
									"function delRequest(id) {",
									"    const host = pm.environment.get(\"host\");",
									"    const port = pm.environment.get(\"port\");",
									"    const object = pm.environment.get(\"urlSystemSetting\");",
									"    const url = `https://${host}:${port}/api/${object}/`;",
									"",
									"    return {",
									"        url: url + id,",
									"        method: 'DELETE',",
									"        header: {",
									"            'Content-Type': 'application/json',",
									"            'X-Foo': 'bar',",
									"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
									"        },  ",
									"    };",
									"}",
									"",
									"pm.test('delete successfully all objects', () => {",
									"    pm.response.to.not.be.error;  ",
									"    pm.response.to.not.have.jsonBody('error');",
									"    const listOfObjects = pm.response.json();          ",
									"",
									"    for (i = 0; i < listOfObjects.length; i++) {",
									"        pm.test(`delete successfully object id ${listOfObjects[i].id}`, () => {",
									"            pm.sendRequest(delRequest(listOfObjects[i].id), (error, response) => {",
									"                pm.expect(response).to.not.be.error;",
									"            });",
									"        });",
									"    }",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "34fa957a-cec3-45b4-a1bc-d2f6160bfb3a",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlSystemSetting}}/",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlSystemSetting}}",
								""
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "set-up-database",
			"item": [
				{
					"name": "enter-god-mode",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8cb0f6c2-c593-4f33-a5c1-c08b4a5bac74",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e6018a51-58a0-4321-a075-bbadf143a365",
								"exec": [
									"pm.test(\"should be successful\", function () {\r",
									"    var resJson = pm.response.json();    \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(resJson.token).not.eql(undefined);\r",
									"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLogin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-group-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eabbde5d-e2e9-4e5f-8c2e-5ba3b52f218e",
								"exec": [
									"pm.test(\"should be successful\", function () {        ",
									"    const response = pm.response.json();    ",
									"    ",
									"    if (response.error) {",
									"        pm.expect(response.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"groupId_admin\", response.id);",
									"        pm.expect(response.id).to.be.a('number');",
									"        pm.expect(pm.environment.get(\"groupId_admin\")).to.be.a('number'); ",
									"        pm.environment.set(\"groupAlias_admin\", response.alias);",
									"    }                ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"administrator\",\r\n    \"alias\": \"admin\",\r\n    \"permission\": \"create/read/update/write\",\r\n    \"noOfMembers\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlGroup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-group-service",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de842568-d9c8-4d24-9f4d-e45992be5e92",
								"exec": [
									"pm.test(\"should be successful\", function () {        ",
									"    const response = pm.response.json();    ",
									"    ",
									"    if (response.error) {",
									"        pm.expect(response.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"groupId_service\", response.id);",
									"        pm.expect(response.id).to.be.a('number');",
									"        pm.expect(pm.environment.get(\"groupId_service\")).to.be.a('number'); ",
									"        pm.environment.set(\"groupAlias_service\", response.alias);        ",
									"    }                ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"service\",\r\n    \"alias\": \"service\",\r\n    \"permission\": \"create/read/update/write\",\r\n    \"noOfMembers\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlGroup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-group-manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ea09836-7d74-44c4-abcb-5ea900922943",
								"exec": [
									"pm.test(\"should be successful\", function () {        ",
									"    const response = pm.response.json();    ",
									"    ",
									"    if (response.error) {",
									"        pm.expect(response.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"groupId_mgmt\", response.id);",
									"        pm.expect(response.id).to.be.a('number');",
									"        pm.expect(pm.environment.get(\"groupId_mgmt\")).to.be.a('number'); ",
									"        pm.environment.set(\"groupAlias_mgmt\", response.alias);        ",
									"    }                ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"manager\",\r\n    \"alias\": \"mgmt\",\r\n    \"permission\": \"read/update\",\r\n    \"noOfMembers\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlGroup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-group-supervisor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9a97f215-2b3b-4053-8273-9ad69d95a0db",
								"exec": [
									"pm.test(\"should be successful\", function () {        ",
									"    const response = pm.response.json();    ",
									"    ",
									"    if (response.error) {",
									"        pm.expect(response.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"groupId_sup\", response.id);",
									"        pm.expect(response.id).to.be.a('number');",
									"        pm.expect(pm.environment.get(\"groupId_sup\")).to.be.a('number'); ",
									"        pm.environment.set(\"groupAlias_sup\", response.alias);        ",
									"    }                ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"supervisor\",\r\n    \"alias\": \"sup\",\r\n    \"permission\": \"read\",\r\n    \"noOfMembers\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlGroup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-group-operator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ba809f4-3c73-4278-a062-fb91447af0b0",
								"exec": [
									"pm.test(\"should be successful\", function () {        ",
									"    const response = pm.response.json();    ",
									"    ",
									"    if (response.error) {",
									"        pm.expect(response.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"groupId_op\", response.id);",
									"        pm.expect(response.id).to.be.a('number');",
									"        pm.expect(pm.environment.get(\"groupId_op\")).to.be.a('number'); ",
									"        pm.environment.set(\"groupAlias_op\", response.alias);        ",
									"    }                ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"operator\",\r\n    \"alias\": \"op\",\r\n    \"permission\": \"read\",\r\n    \"noOfMembers\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlGroup}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-an-admin-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7b10510-10ba-4a1d-92ed-188b7c053bc4",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    const reqJson = JSON.parse(pm.request.body.raw);    ",
									"    ",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"staffId_admin\", reqJson.staffId);",
									"        pm.environment.set(\"password_admin\", reqJson.password);",
									"        pm.environment.set(\"contactNumber_admin\", reqJson.contactNumber);",
									"        pm.environment.set(\"userId_admin\", resJson.id);",
									"    }    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"S4374567\",\r\n    \"password\": \"secret\",\r\n    \"firstName\": \"Ali\",\r\n    \"lastName\": \"Lau\",\r\n    \"group\": \"{{groupAlias_admin}}\",\r\n    \"groupId\": {{groupId_admin}},\r\n    \"contactNumber\": \"92393246\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-service-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "57b7bf33-c93c-450a-a537-777e5f6469b2",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    const reqJson = JSON.parse(pm.request.body.raw);    ",
									"    ",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"staffId_service\", reqJson.staffId);",
									"        pm.environment.set(\"password_service\", reqJson.password);",
									"        pm.environment.set(\"contactNumber_service\", reqJson.contactNumber);",
									"    }    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"S4274567\",\r\n    \"password\": \"secret\",\r\n    \"firstName\": \"Ox\",\r\n    \"lastName\": \"the Greate\",\r\n    \"group\": \"{{groupAlias_service}}\",\r\n    \"groupId\": {{groupId_service}},\r\n    \"contactNumber\": \"92393246\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-manager-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4137485-a623-4b3d-9ba4-ef1124e5bfcd",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    const reqJson = JSON.parse(pm.request.body.raw);    ",
									"    ",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"staffId_mgmt\", reqJson.staffId);",
									"        pm.environment.set(\"password_mgmt\", reqJson.password);",
									"        pm.environment.set(\"contactNumber_mgmt\", reqJson.contactNumber);",
									"    }    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"S4174567\",\r\n    \"password\": \"secret\",\r\n    \"firstName\": \"Nix\",\r\n    \"lastName\": \"Pixie\",\r\n    \"group\": \"{{groupAlias_mgmt}}\",\r\n    \"groupId\": {{groupId_mgmt}},\r\n    \"contactNumber\": \"92393246\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-supervisor-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "58e737da-f755-4d7f-9ed7-8f18a96e4813",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    const reqJson = JSON.parse(pm.request.body.raw);    ",
									"    ",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"staffId_sup\", reqJson.staffId);",
									"        pm.environment.set(\"password_sup\", reqJson.password);",
									"        pm.environment.set(\"contactNumber_sup\", reqJson.contactNumber);",
									"",
									"    }    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"S5174567\",\r\n    \"password\": \"secret\",\r\n    \"firstName\": \"Gandalf\",\r\n    \"lastName\": \"the Wise\",\r\n    \"group\": \"{{groupAlias_sup}}\",\r\n    \"groupId\": {{groupId_sup}},\r\n    \"contactNumber\": \"92393246\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-an-operator-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ddfd430-e1b9-45c8-9d16-468bcff23395",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    const reqJson = JSON.parse(pm.request.body.raw);    ",
									"    ",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"staffId_op\", reqJson.staffId);",
									"        pm.environment.set(\"password_op\", reqJson.password);",
									"        pm.environment.set(\"contactNumber_op\", reqJson.contactNumber);",
									"",
									"    }    ",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"S1374567\",\r\n    \"password\": \"secret\",\r\n    \"firstName\": \"Strong\",\r\n    \"lastName\": \"Martini\",\r\n    \"group\": \"{{groupAlias_op}}\",\r\n    \"groupId\": {{groupId_op}},\r\n    \"contactNumber\": \"92393246\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlUser}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-deceased-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1029a842-5884-486c-a282-74382a6adb2d",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"deceasedId\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Jonan Rotter\",\r\n  \"dateOfDeath\": \"01/09/2001\",\r\n  \"cremationDateTime\": \"09:30\",\r\n  \"religion\": \"Christian\",\r\n  \"cremationPermitNumber\": \"CRE-2001-12\",\r\n  \"deathCertNumber\": \"DED-32124\",\r\n  \"age\": 69,\r\n  \"causeOfDeath\": \"Natural\",\r\n  \"status\": \"NONE\",\r\n  \"remark\": \"NONE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlDeceased}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlDeceased}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-hearth-cremain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1ae227e-26bc-4e6e-9a1c-591b37e27673",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"hearthCremainId\", resJson.id);",
									"        pm.environment.set(\"hearthCremain_deceasedId\", resJson.deceasedId);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"PENDING\",\r\n    \"location\": \"B2-01\",\r\n    \"isUsed\": false,\r\n    \"deceasedId\": {{deceasedId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlHearthInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-hearth-empty-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5e259911-dbb6-4a2c-b145-ae765baf9db4",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"hearthEmpty1Id\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"PENDING\",\r\n    \"location\": \"B2-02\",\r\n    \"isUsed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlHearthInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-hearth-empty-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "995121ee-f849-43b8-94d0-e983419667cf",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"hearthEmpty2Id\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"status\": \"PENDING\",\r\n    \"location\": \"B2-03\",    \r\n    \"isUsed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlHearthInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-OneIlsToPcms",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a37d3cc-2303-418f-b300-4f1edeb997e4",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"oneIlsId\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"deceasedName\": \"Nikita Foosball\",\r\n  \"dateOfDeath\": \"29/09/2020\",\r\n  \"deathCertNumber\": \"CERT-10129-113\",\r\n  \"cremationPermitNumber\": \"PERMIT/2020-1012-12\",\r\n  \"qrCodeApplicationCremation\": \"QR CODE\",  \r\n  \"deceasedReligion\": \"SOLARIS\",\r\n  \"deceasedAge\": 1001,\r\n  \"dateOfService\": \"1/2/2022\",\r\n  \"timeOfService\": \"13:00\",\r\n  \"serviceHallNumber\": \"1\",\r\n  \"crematorNumber\": \"1\",\r\n  \"isSelfPicked\": true,\r\n  \"isPulverized\": true,\r\n  \"qrCodeCollectionCrematedRemains\": \"QR CODE\",\r\n  \"dateOfCollection\": \"1/1/2023\",\r\n  \"timeOfCollection\": \"13:00\",\r\n  \"bookingStatus\": \"Pending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlOneIlsToPcms}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlOneIlsToPcms}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-room-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ec7c137-170d-4ba6-81c0-3ab950908ee7",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"roomId\", resJson.id);                ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"NOT USED\",\r\n    \"roomNumber\": \"10\",\r\n    \"isUsed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlRoomInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlRoomInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-locker-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83358589-15da-406c-b324-b9631497e1e1",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"lockerId\", resJson.id);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"lockerNumber\": \"1\",\r\n    \"isUsed\": false,\r\n    \"isFrontDoorOpen\": false,\r\n    \"isRearDoorOpen\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLockerInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLockerInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-recipient-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cbe4ac72-d80f-4555-8f45-fd0aa267708c",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"recipientId\", resJson.id);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"name\": \"Phil Roadster\",\r\n    \"identityNumber\": \"S644567\",\r\n    \"contactNumber\": \"97473123\",\r\n    \"email\": \"phil.roadster@hopetechnik.com\",\r\n    \"relationship\": \"son of deceased\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlRecipientInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlRecipientInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremation-workflow-info-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f017d1f0-f209-4cc6-9275-da41f72915da",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"cremationWorkflowInfoId\", resJson.id);",
									"        pm.environment.set(\"cremationWorkflowInfo_deceasedId\", resJson.deceasedId);",
									"        pm.environment.set(\"cremationWorkflowInfo_hearthCremainId\", resJson.hearthCremainId);",
									"        pm.environment.set(\"cremationWorkflowInfo_serviceId\", resJson.serviceId);",
									"        pm.environment.set(\"cremationWorkflowInfo_transferHallId\", resJson.transferHallId);",
									"        pm.environment.set(\"cremationWorkflowInfo_insertionChamberId\", resJson.insertionChamberId);",
									"        pm.environment.set(\"cremationWorkflowInfo_coolingChamberId\", resJson.coolingChamberId);",
									"        pm.environment.set(\"cremationWorkflowInfo_crematorId\", resJson.crematorId);",
									"        pm.environment.set(\"cremationWorkflowInfo_oneIlsId\", resJson.oneIlsToPcmsId);",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n          \"deceasedId\": {{deceasedId}},\r\n          \"serviceHallId\": 1,\r\n          \"transferHallId\": 1,\r\n          \"insertionChamberId\": 1,\r\n          \"coolingChamberId\": 1,\r\n          \"crematorId\": 1,\r\n          \"hearthCremainId\": {{hearthCremainId}},\r\n          \"qrCode\": \"qr code\",\r\n          \"dateOfService\": \"01/10/2019\",\r\n          \"timeOfService\": \"11:12\",\r\n          \"serviceHallNumber\": \"1\",\r\n          \"crematorNumber\": \"1\",\r\n          \"bookingStatus\": \"Pending\",\r\n          \"oneIlsToPcmsId\": {{oneIlsId}}\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCremationWorkflowInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-collection-workflow-info-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d2288e5-fc73-41e9-8689-ee0a867f5e7e",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"collectionWorkflowInfoId\", resJson.id);",
									"        pm.environment.set(\"collectionWorkflowInfo_deceasedId\", resJson.deceasedId);",
									"        pm.environment.set(\"collectionWorkflowInfo_recipientId\", resJson.recipientId);",
									"        pm.environment.set(\"collectionWorkflowInfo_lockerId\", resJson.lockerId);",
									"        pm.environment.set(\"collectionWorkflowInfo_roomId\", resJson.roomId);",
									"        pm.environment.set(\"collectionWorkflowInfo_hearthCremainId\", resJson.hearthCremainId);",
									"        pm.environment.set(\"collectionWorkflowInfo_hearthEmpty1Id\", resJson.hearthEmpty1Id);",
									"        pm.environment.set(\"collectionWorkflowInfo_hearthEmpty2Id\", resJson.hearthEmpty2Id);",
									"        pm.environment.set(\"collectionWorkflowInfo_oneIlsId\", resJson.oneIlsToPcmsId);",
									"",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n          \"deceasedId\": {{deceasedId}},\r\n          \"recipientId\": {{recipientId}},\r\n          \"scenario\": 1,\r\n          \"crematorNumber\": \"1\",\r\n          \"hearthCremainId\": {{hearthCremainId}},\r\n          \"hearthEmpty1Id\": {{hearthEmpty1Id}},\r\n          \"hearthEmpty2Id\": {{hearthEmpty2Id}},          \r\n          \"lockerId\": {{lockerId}},\r\n          \"roomId\": {{roomId}},\r\n          \"pulverization\": true,\r\n          \"qrCode\": \"qr code\",\r\n          \"dateOfCollection\": \"01/10/2019\",\r\n          \"timeOfCollection\": \"11:12\",\r\n          \"bookingStatus\": \"Pending\",\r\n          \"oneIlsToPcmsId\": {{oneIlsId}}\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCollectionWorkflowInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-collection-workflow-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28451a28-deec-4eed-a9b9-ac33e6a8beda",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"collectionWorkflowId\", resJson.id);",
									"        pm.environment.set(\"collectionWorkflow_workflowInfoId\", resJson.workflowInfoId)",
									"",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"workflowInfoId\": {{collectionWorkflowInfoId}},\r\n  \"status\": \"WTP\",\r\n  \"createdDateTime\": \"29/09/2020\",\r\n  \"statusDateTime\": \"29/09/2020\",\r\n  \"completionDateTime\": \"29/09/2020\",\r\n  \"jobSteps\": \"1\",\r\n  \"currentStep\": \"1\",\r\n  \"errorCode\": 1,\r\n  \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflow}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCollectionWorkflow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremation-workflow-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b38f54c7-fe17-4eea-87bc-381036326271",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"cremationWorkflowId\", resJson.id);",
									"        pm.environment.set(\"cremationWorkflow_workflowInfoId\", resJson.workflowInfoId)",
									"",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"workflowInfoId\": {{cremationWorkflowInfoId}},\r\n  \"status\": \"WTP\",\r\n  \"createdDateTime\": \"29/09/2020\",\r\n  \"statusDateTime\": \"29/09/2020\",\r\n  \"completionDateTime\": \"29/09/2020\",\r\n  \"jobSteps\": \"1\",\r\n  \"currentStep\": \"1\",\r\n  \"errorCode\": 1,\r\n  \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCremationWorkflow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremation-workflow-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "922aab9f-45f4-4137-ab8e-8149d85b9dbe",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"workflowInfoId\": 2,\r\n  \"status\": \"WTP\",\r\n  \"createdDateTime\": \"1/09/2020\",\r\n  \"statusDateTime\": \"1/09/2020\",\r\n  \"completionDateTime\": \"1/09/2020\",\r\n  \"jobSteps\": \"5\",\r\n  \"currentStep\": \"1\",\r\n  \"errorCode\": 10,\r\n  \"errorDescription\": \"Failed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCremationWorkflow}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-room-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a241912d-1b32-41a5-bdfc-b8b7a54b4305",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"roomJobId\", resJson.id);                ",
									"        pm.environment.set(\"roomJob_collectionWorkflowId\", resJson.collectionWorkflowId);   ",
									"        pm.environment.set(\"roomJob_roomId\", resJson.roomId);   ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"createdDateTime\": \"01/01/2018\",\r\n    \"statusDateTime\": \"01/02/2018\",\r\n    \"completionDateTime\": \"01/02/2018\",\r\n    \"roomId\": {{roomId}},\r\n    \"collectionWorkflowId\": {{collectionWorkflowId}},\r\n    \"queueNumber\": \"001\",\r\n    \"errorCode\": 1,\r\n    \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlRoomJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremator-info-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eeab26e0-5b1e-4268-aeb2-60cb771c698b",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"crematorId\", resJson.id);",
									"        pm.environment.set(\"cremator_hearthCremainId\", resJson.hearthId);",
									"        pm.environment.set(\"crematorNumber\", resJson.crematorNumber);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "      {\r\n        \"status\": \"WTP\",\r\n        \"crematorNumber\": \"L1-01\",\r\n        \"isUsed\": true,\r\n        \"hearthId\": {{hearthCremainId}}\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCrematorInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremator-info-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "01de89db-5a6e-4df3-a059-45079267a5af",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "      {\r\n        \"status\": \"WTP\",\r\n        \"crematorNumber\": \"L1-02\",\r\n        \"isUsed\": false\r\n      }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCrematorInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremator-job-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ed8febe-8547-4b84-a1e1-30806cfb7a31",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"status\": \"WTP\",\r\n  \"createdDateTime\": \"29/09/2020\",\r\n  \"statusDateTime\": \"29/09/2020\",\r\n  \"completionDateTime\": \"29/09/2020\",\r\n  \"crematorId\": 1,  \r\n  \"cremationWorkflowId\": {{cremationWorkflowId}},\r\n  \"errorCode\": 1,\r\n  \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCrematorJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-cremator-job-2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27b5bff4-db81-4af5-b592-acaad94e05eb",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"crematorJobId\", resJson.id);",
									"        pm.environment.set(\"crematorJob_cremationWorkflowId\", resJson.cremationWorkflowId);",
									"",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"status\": \"WTP\",\r\n  \"createdDateTime\": \"29/09/2020\",\r\n  \"statusDateTime\": \"29/09/2020\",\r\n  \"completionDateTime\": \"29/09/2020\",\r\n  \"crematorId\": {{crematorId}},  \r\n  \"cremationWorkflowId\": {{cremationWorkflowId}},\r\n  \"errorCode\": 1,\r\n  \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlCrematorJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-an-e-paper-info-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "beb6e531-3efa-4662-b87b-b564d206f11a",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"ePaperId\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"WTP\",\r\n    \"location\": \"B2-01\",\r\n    \"data\": \"{name: Ali}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlEPaperInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlEPaperInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-an-e-paper-job-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56a9d159-6007-44f5-9be4-e504e8f3c517",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"ePaperJobId\", resJson.id);",
									"        pm.environment.set(\"ePaperJob_cremationWorkflowId\", resJson.cremationWorkflowId);",
									"        pm.environment.set(\"ePaperJob_ePaperId\", resJson.ePaperId);",
									"",
									"    }    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n  \"status\": \"WTP\",\r\n  \"createdDateTime\": \"29/09/2020\",\r\n  \"statusDateTime\": \"29/09/2020\",\r\n  \"completionDateTime\": \"29/09/2020\",\r\n  \"ePaperId\": {{ePaperId}},  \r\n  \"cremationWorkflowId\": {{cremationWorkflowId}},\r\n  \"errorCode\": 1,\r\n  \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlEPaperJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-agv-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb015c00-1f2f-4610-987d-d9702754cbd6",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"agvJobId\", resJson.id);",
									"        pm.environment.set(\"agvJob_cremationWorkflowId\", resJson.cremationWorkflowId);",
									"        pm.environment.set(\"agvJob_collectionWorkflowId\", resJson.collectionWorkflowId);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"createdDateTime\": \"01/02/2020\",\r\n    \"statusDateTime\": \"01/02/2020\",\r\n    \"completionDateTime\": \"01/02/2020\",\r\n    \"ownerKey\": \"default\",\r\n    \"relateKey\": \"default\",\r\n    \"order\": \"default\",\r\n    \"orderDetail\": \"default\",\r\n    \"destination1\": \"default\",\r\n    \"height1\": \"default\",\r\n    \"destination2\": \"default\",\r\n    \"height2\": \"default\",\r\n    \"priority\": \"default\",\r\n    \"carrierNumber\": \"default\",\r\n    \"cremationWorkflowId\": {{cremationWorkflowId}},\r\n    \"collectionWorkflowId\": {{collectionWorkflowId}},\r\n    \"errorCode\": 0,\r\n    \"errorDescription\": \"NONE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlAgvJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-printer-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a75b00f-9f93-40ef-8f2c-562146823950",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"printerId\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"location\": \"B2-01\",\r\n    \"isUsed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlPrinterInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlPrinterInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-printer-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d26925c8-5bab-40b8-bc8c-65803625441b",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"printerJobId\", resJson.id);",
									"        pm.environment.set(\"printerJob_printerId\", resJson.printerId);",
									"        pm.environment.set(\"printerJob_userId\", resJson.userId);",
									"        pm.environment.set(\"printerJob_collectionWorkflowId\", resJson.collectionWorkflowId);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"createdDateTime\": \"01/02/2020\",\r\n    \"statusDateTime\": \"01/02/2020\",\r\n    \"completionDateTime\": \"01/02/2020\",\r\n    \"userId\": {{userId_admin}},\r\n    \"printerId\": {{printerId}},\r\n    \"collectionWorkflowId\": {{collectionWorkflowId}},\r\n    \"isBigLocker\": true,\r\n    \"errorCode\": 0,\r\n    \"errorDescription\": \"NONE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlPrinterJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-printing-history",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8427f9fe-44b8-450e-83fd-3098e3114058",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"printingHistoryId\", resJson.id);",
									"        pm.environment.set(\"printingHistory_printerJobId\", resJson.printerJobId);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"deceasedName\": \"Li Hao\",\r\n    \"religion\": \"SOLARIS\",\r\n    \"serviceHallNumber\": \"1\",\r\n    \"crematorNumber\": \"{{crematorNumber}}\",\r\n    \"cremationDateTime\": \"01/10/2020\",\r\n    \"staffId\": \"{{staffId_admin}}\",\r\n    \"staffName\": \"Shabu Shabu\",\r\n    \"remarks\": \"None\",\r\n    \"printerJobId\": {{printerJobId}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlPrintingHistory}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlPrintingHistory}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-scanner-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9a1d93d-ac13-4513-8d3d-4976664f632d",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"scannerId\", resJson.id);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"location\": \"B2-01\",\r\n    \"isUsed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlScannerInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlScannerInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-scanner-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "758580c1-4ece-4750-a5c3-1f86f725365e",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"scannerJobId\", resJson.id);",
									"        pm.environment.set(\"scannerJob_cremationWorkflowId\", resJson.cremationWorkflowId);",
									"        pm.environment.set(\"scannerJob_collectionWorkflowId\", resJson.collectionWorkflowId);",
									"        pm.environment.set(\"scannerJob_scannerId\", resJson.scannerId);",
									"    }    ",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"createdDateTime\": \"01/02/2020\",\r\n    \"statusDateTime\": \"01/02/2020\",\r\n    \"completionDateTime\": \"01/02/2020\",\r\n    \"scannerId\": {{scannerId}},\r\n    \"cremationWorkflowId\": {{cremationWorkflowId}},\r\n    \"collectionWorkflowId\": {{collectionWorkflowId}},    \r\n    \"errorCode\": 0,\r\n    \"errorDescription\": \"NONE\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlScannerJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-parking-bay-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dd4c7215-9aa8-4dc8-a053-7e3cdc5a2ea2",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"parkingBayId\", resJson.id);",
									"        pm.environment.set(\"parkingBay_hearthId\", resJson.hearthId);",
									"    }    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"level\": \"B2\",\r\n    \"unitNumber\": \"01\",\r\n    \"hearthId\": {{hearthCremainId}},\r\n    \"isUsed\": false,\r\n    \"isPriority\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlParkingBayInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlParkingBayInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-button-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c05847a-6c35-41c6-9bbc-c1f000083b05",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"buttonId\", resJson.id);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"location\": \"B2-10\",    \r\n    \"isUsed\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlButtonInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlButtonInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-button-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ee1a1e41-40dd-4cb3-b31d-c6172191f7bb",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"buttonJobId\", resJson.id);        ",
									"        pm.environment.set(\"buttonJob_buttonId\", resJson.buttonId);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"createdDateTime\": \"10/10/2020\",    \r\n    \"statusDateTime\": \"01/10/2020\",\r\n    \"completionDateTime\": \"18/10/2020\",\r\n    \"buttonId\": {{buttonId}},\r\n    \"collectionWorkflowId\": {{collectionWorkflowId}},\r\n    \"errorCode\": 1,\r\n    \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlButtonJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlButtonJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-locker-job",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cb1c06c7-a806-43b0-af78-34fed90dc62d",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"lockerJobId\", resJson.id);        ",
									"        pm.environment.set(\"lockerJob_lockerId\", resJson.lockerId);        ",
									"        pm.environment.set(\"lockerJob_collectionWorkflowId\", resJson.collectionWorkflowId);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"createdDateTime\": \"10/10/2020\",    \r\n    \"statusDateTime\": \"01/10/2020\",\r\n    \"completionDateTime\": \"18/10/2020\",\r\n    \"lockerId\": {{lockerId}},\r\n    \"collectionWorkflowId\": {{collectionWorkflowId}},\r\n    \"queueNumber\": \"001\",\r\n    \"errorCode\": 1,\r\n    \"errorDescription\": \"None\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLockerJob}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-agv-station",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f63a45c3-a9fc-4f47-8918-70d261524b17",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"agvStationId\", resJson.id);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"location\": \"02-01\",\r\n    \"stationNumber\": \"001\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlAgvStation}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlAgvStation}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-tv-info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95ee3044-b3f5-46de-974d-7b8a852bb2dd",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"tvInfoId\", resJson.id);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"status\": \"READY\",\r\n    \"location\": \"02-01\",\r\n    \"data\": \"data\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlTvInfo}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlTvInfo}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "create-a-new-item-in-system-setting",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc91c545-bea2-4c64-a122-5b0140dcefd3",
								"exec": [
									"pm.test(\"should be successful\", function () {    ",
									"    const resJson = pm.response.json();",
									"    if (resJson.error) {",
									"        pm.expect(resJson.error.message.includes(\"exists\")).to.eql(true);",
									"    }",
									"    else {",
									"        pm.expect(pm.response.code).to.be.oneOf([200]);",
									"        pm.environment.set(\"systemSettingId\", resJson.id);        ",
									"    }        ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_login}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{  \r\n    \"transferJobTimeout\": 1000,\r\n    \"agvJobTimeout\": 1000,\r\n    \"loginTimeout\": 1000,\r\n    \"scannerTimeout\": 1000,\r\n    \"printerTimeout\": 1000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlSystemSetting}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlSystemSetting}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f3aab341-8f56-4c54-9fab-2999f64be8c1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b16064c6-e6f2-427e-bf7a-726f53b27249",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "log-in-with-2fa",
			"item": [
				{
					"name": "login-with-an-admin-account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0cffc8b1-7991-4adb-be00-bbe145624a90",
								"exec": [
									"pm.test(\"should be successful\", function () {",
									"  pm.response.to.not.be.error;  ",
									"  pm.response.to.not.have.jsonBody('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_admin}}\",\r\n    \"password\": \"{{password_admin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLogin}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "send-otp-for-verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4aca785e-1585-457e-8438-558257186d24",
								"exec": [
									"pm.test(\"should receive successfully login token\", function () {\r",
									"    const resJson = pm.response.json();    \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(resJson.token).not.eql(undefined);\r",
									"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_admin}}\",\r\n    \"otpCode\": \"{{otp_secret}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/auth/login/verify-otp",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"login",
								"verify-otp"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "reset-password-with-2fa",
			"item": [
				{
					"name": "send-reset-password-request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17deb0ac-5b68-422b-a339-15d4db6ac08e",
								"exec": [
									"pm.test(\"should be successful\", function () {",
									"    const resJson = pm.response.json();    ",
									"    pm.response.to.have.status(200);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_admin}}\",\r\n    \"contactNumber\": \"{{contactNumber_admin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/auth/reset-pass/request",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"reset-pass",
								"request"
							]
						}
					},
					"response": []
				},
				{
					"name": "send-otp-for-verification",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67690c58-034f-4194-b877-369145d9caa5",
								"exec": [
									"pm.test(\"should be successful\", function () {\r",
									"    const resJson = pm.response.json();    \r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(resJson.token).not.eql(undefined);\r",
									"    pm.environment.set(\"jwt_token_reset_pass\", resJson.token)\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_admin}}\",\r\n    \"otpCode\": \"{{otp_secret}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/auth/reset-pass/verify-otp",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"reset-pass",
								"verify-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "change-to-a-new-password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c6b00dd3-e8e4-46e1-a9ac-86a1da925a3f",
								"exec": [
									"pm.test(\"should be successful\", function () {",
									"    const resJson = pm.response.json();    ",
									"    const reqJson = JSON.parse(pm.request.body.raw);    ",
									"    pm.response.to.have.status(200);",
									"    pm.environment.set(\"password_admin_new\", reqJson.password)",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_reset_pass}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"password\": \"newpassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/auth/reset-pass",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"auth",
								"reset-pass"
							]
						}
					},
					"response": []
				},
				{
					"name": "login-with-new-password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b090c8c3-b3d1-449d-90ae-dcd823b410d2",
								"exec": [
									"pm.test(\"should be successful\", function () {",
									"  pm.response.to.not.be.error;  ",
									"  pm.response.to.not.have.jsonBody('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"staffId\": \"{{staffId_admin}}\",\r\n    \"password\": \"{{password_admin_new}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"api",
								"{{urlLogin}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "test-controllers-functions",
			"item": [
				{
					"name": "user-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56314802-bf39-4652-9f52-ab8fb46fffb4",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7a9db303-1f36-4998-b423-0dde7ab301f4",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlUser}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1d0de95-5c63-45f6-90ea-65e84a190dea",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be829f1b-7512-450b-9987-9f32700d8359",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlUser\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"userId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlUser}}/{{userId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlUser}}",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1424420e-6386-4bbb-866b-f07f11d0fb0a",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlUser\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"userId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.firstName).to.equal('New First Name');",
											"        pm.expect(body.lastName).to.equal('New Last Name');",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "be070143-bba2-43c4-b33a-845b295bef73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"firstName\": \"New First Name\",\r\n    \"lastName\": \"New Last Name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlUser}}/{{userId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlUser}}",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "deceased-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4804f848-fd50-4774-80ee-b967e78cbb0b",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "898fff07-f88d-4e64-bb8c-425e7deaa1bf",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlDeceased}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlDeceased}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee318687-d9b3-46fc-9c79-9f6494f2cefe",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "73ea5bf6-c003-4cfc-84ff-9eefecfff9c8",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlDeceased\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"deceasedId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlDeceased}}/{{deceasedId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlDeceased}}",
										"{{deceasedId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe821c1b-9467-49c5-b106-da86c7a1ce52",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlDeceased\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"deceasedId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.name).to.equal('New Name');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c265588d-13f1-482a-a8ce-2e350cb631b8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"New Name\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlDeceased}}/{{deceasedId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlDeceased}}",
										"{{deceasedId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "e-paper-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fbe8410-09f6-4cc3-9d52-96c5e27e397c",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d9fb7ee7-a9b6-4b1d-9174-d654b12c57b1",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce2f89ef-2f20-4bcd-beef-f8b5e2653b83",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5d60b3d7-c1fe-467b-8576-50b1029dbf24",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlEPaperInfo\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"ePaperInfoId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperInfo}}/{{ePaperInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperInfo}}",
										"{{ePaperInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1f088a9-45c4-4fa1-b823-8211290ac955",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlEPaperInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"ePaperInfoId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.data).to.equal('New Data');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "627a458a-647d-4260-ba46-db6bc964d044",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"data\": \"New Data\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperInfo}}/{{ePaperInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperInfo}}",
										"{{ePaperInfoId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "one-Ils-to-Pcms-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5dd7639-5a75-4a97-a654-27526406b980",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23e61dc9-7223-4e2e-97fd-39c08b488b41",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlOneIlsToPcms}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlOneIlsToPcms}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2ec103c-5ef6-4e64-a030-604825e5c1b5",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "84fa8762-ac9c-40d7-a204-a57fedb69c03",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlOneIlsToPcms\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"oneIlsId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlOneIlsToPcms}}/{{oneIlsId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlOneIlsToPcms}}",
										"{{oneIlsId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e509dcc1-2add-44cd-b680-d19d10034d41",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlOneIlsToPcms\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"oneIlsId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.bookingStatus).to.equal('DONE');",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0cf70b69-5e04-40f3-b0de-a64ca82378f3",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"bookingStatus\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlOneIlsToPcms}}/{{oneIlsId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlOneIlsToPcms}}",
										"{{oneIlsId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "e-paper-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96fa8b07-6272-41af-87d2-d84ec447c05e",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef2a77db-400d-43c3-82b9-f3fa9c92066b",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperJob}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "394e234b-2b69-43d2-a92a-8a3f5d21b8f7",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53a5b518-f01a-4a7d-b30b-fc07335e58a2",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlEPaperJob\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"ePaperJobId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}/{{ePaperJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperJob}}",
										"{{ePaperJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2dad4418-6828-4b41-beae-6d6c5b43d8e5",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlEPaperJob\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"ePaperJobId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6e808e9d-f17d-4461-a71c-35cbfb788aae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}/{{ePaperJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperJob}}",
										"{{ePaperJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-cremation-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a7191b87-7a2a-47be-aad4-93ee9acc3964",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"ePaperJob_cremationWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}/{{ePaperJobId}}/{{urlCremationWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperJob}}",
										"{{ePaperJobId}}",
										"{{urlCremationWorkflow}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-e-paper-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c2ddbc51-b903-4397-a897-1458875c79ba",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"ePaperJob_ePaperId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlEPaperJob}}/{{ePaperJobId}}/{{urlEPaperInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlEPaperJob}}",
										"{{ePaperJobId}}",
										"{{urlEPaperInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "cremator-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b6daa7e4-9cb1-4762-ac18-68ab5f90f795",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc3ddf48-cad6-4288-9dca-becef3bdb57b",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "864e3fff-e29f-46bd-9863-76c1ca2f3bbf",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a57b94fd-dcb4-43c8-ace0-8d663f504dc7",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlCrematorInfo\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"crematorInfoId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}/{{crematorInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorInfo}}",
										"{{crematorInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eac9345-9b39-4df6-b57d-212efd57adcd",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlCrematorInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"crematorInfoId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.crematorNumber).to.equal('NEW');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d30442c-46f1-45cb-a89f-9f7850ba4131",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"crematorNumber\": \"NEW\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}/{{crematorInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorInfo}}",
										"{{crematorInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-hearth-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52def029-68e2-4271-9d5d-5b9dde6b962f",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"cremator_hearthCremainId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorInfo}}/{{crematorId}}/{{urlHearthInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorInfo}}",
										"{{crematorId}}",
										"{{urlHearthInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "cremation-workflow-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2f01aaa-d3fc-407f-ab27-c1151e16f226",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "641ad093-7f2d-478d-85d6-dbb8b45f3f0c",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflowInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2af1ac7-9edf-4d23-9de2-18cb2fd877b2",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "55b1b994-adc7-4680-80fb-a5fb942991aa",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlCrematorInfo\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"crematorInfoId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}/{{cremationWorkflowInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflowInfo}}",
										"{{cremationWorkflowInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5160010f-8d8c-47b4-88b7-888223d48bba",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlCremationWorkflowInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"cremationWorkflowInfoId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.bookingStatus).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ef0df200-a405-4360-8e45-1c09bc7288e8",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"bookingStatus\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}/{{cremationWorkflowInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflowInfo}}",
										"{{cremationWorkflowInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-hearth-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "288f3265-d307-4ae0-b960-4cf80e015b92",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"cremationWorkflowInfo_hearthCremainId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}/{{cremationWorkflowInfoId}}/{{urlHearthInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflowInfo}}",
										"{{cremationWorkflowInfoId}}",
										"{{urlHearthInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-deceased-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53aad765-5c4f-4ca4-b06d-57708e4f28bf",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"cremationWorkflowInfo_deceasedId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}/{{cremationWorkflowInfoId}}/{{urlDeceased}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflowInfo}}",
										"{{cremationWorkflowInfoId}}",
										"{{urlDeceased}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-OneIls",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3129f581-8cec-42d8-a1e9-389b5cccaedb",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"cremationWorkflowInfo_oneIlsId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflowInfo}}/{{cremationWorkflowInfoId}}/{{urlOneIlsToPcms}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflowInfo}}",
										"{{cremationWorkflowInfoId}}",
										"{{urlOneIlsToPcms}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "collection-workflow-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44ae2884-dcbc-4040-9f4b-72924172c5fa",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9186b34-0f7f-465b-b8cc-71ceb5ef96b7",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-a-particular-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5275937c-137f-49fd-becb-0cace9c98d0c",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "886b385d-0815-4da3-b230-94c2e787d5d5",
										"exec": [
											"const host = pm.environment.get(\"host\");\r",
											"const port = pm.environment.get(\"port\");\r",
											"const object = pm.environment.get(\"urlCrematorInfo\");\r",
											"const token = pm.environment.get(\"jwt_token_login\");\r",
											"const id = \"crematorInfoId\";\r",
											"\r",
											"const getRequest = {\r",
											"  url: `https://${host}:${port}/api/${object}` ,\r",
											"  method: 'GET',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    'X-Foo': 'bar',\r",
											"    'Authorization': `Bearer ${token}`\r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ key: 'this is json' })\r",
											"  }\r",
											"};\r",
											"\r",
											"// Example containing a test\r",
											"pm.sendRequest(getRequest, (error, response) => {\r",
											"  if (error) {\r",
											"    console.log(error);\r",
											"  }\r",
											"\r",
											"  pm.test('database should have at least one item', () => {\r",
											"    pm.expect(error).to.equal(null);\r",
											"    pm.expect(response).to.have.property('code', 200);\r",
											"    pm.expect(response).to.have.property('status', 'OK');\r",
											"    var resJson = response.json();    \r",
											"    pm.expect(resJson.length).to.greaterThan(0);\r",
											"    pm.environment.set(id, resJson[0].id)\r",
											"  });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8997c20e-9e14-4c2b-b13d-90c613d93167",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlCollectionWorkflowInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"collectionWorkflowInfoId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.bookingStatus).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b2b982f4-b646-4039-a5e2-6d40651c1071",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"bookingStatus\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-hearth-cremain-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7b69f58-03f2-4c1b-a641-9ed1f389b04b",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_hearthCremainId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/hearth-cremain",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"hearth-cremain"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-hearth-empty-1-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a21b1a8b-e980-492b-a877-198160a57563",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_hearthEmpty1Id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/hearth-empty-1",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"hearth-empty-1"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-hearth-empty-2-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7382e939-3d59-4c45-bf35-db9db9d9b341",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_hearthEmpty2Id\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/hearth-empty-2",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"hearth-empty-2"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-deceased-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fd7dfc15-8e8c-4b2e-a640-e3cfa742c2c8",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_deceasedId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/{{urlDeceased}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"{{urlDeceased}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-OneIls",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e3d2729-9a53-4b3a-a71c-1ea5fa704ece",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_oneIlsId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/{{urlOneIlsToPcms}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"{{urlOneIlsToPcms}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-room-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2bd0205-d002-4076-b227-4965f2c0f573",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_roomId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/{{urlRoomInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"{{urlRoomInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-locker-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe755d7c-cbaa-4c72-86c2-6f025df3de46",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_lockerId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/{{urlLockerInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"{{urlLockerInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-recipient-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ccf48190-be05-4c0f-9a8c-d5073feadf60",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"collectionWorkflowInfo_recipientId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCollectionWorkflowInfo}}/{{collectionWorkflowInfoId}}/{{urlRecipientInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCollectionWorkflowInfo}}",
										"{{collectionWorkflowInfoId}}",
										"{{urlRecipientInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "group-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6719e1c-3898-4b54-adde-ecb6621ec5fb",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "64fc2564-0197-4787-9ac6-35595fbfa8d1",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlGroup}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e55fbbfc-ee1f-4a8e-9b7c-2b0d4d87c35f",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}/{{groupId_admin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlGroup}}",
										"{{groupId_admin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee932668-c3c0-499e-8a5f-2447574532ed",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"function getRequest(id) {",
											"    const host = pm.environment.get(\"host\");",
											"    const port = pm.environment.get(\"port\");",
											"    const object = pm.environment.get(\"urlGroup\");",
											"    const url = `https://${host}:${port}/api/${object}/`;",
											"",
											"    return {",
											"        url: url + id,",
											"        method: 'GET',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'X-Foo': 'bar',",
											"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"        },  ",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({ key: 'this is json' })",
											"        }",
											"    };",
											"}",
											"",
											"",
											"pm.sendRequest(getRequest(pm.environment.get(\"groupId_admin\")), (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.name).to.equal('New Group');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "686dcc42-6ad3-4ddf-b5a1-38a14457bb02",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"New Group\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlGroup}}/{{groupId_admin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlGroup}}",
										"{{groupId_admin}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "agv-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "577e04ee-f257-4b01-95e0-7b60f76df561",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c96c89b-9945-48b8-9d36-5a7dd669985f",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvJob}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bd7f00e-5573-497a-b1a4-4f6cc60601f5",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}/{{agvJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvJob}}",
										"{{agvJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bcd8cb57-df70-47b4-bcba-3c7773fe5a41",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"function getRequest(id) {",
											"    const host = pm.environment.get(\"host\");",
											"    const port = pm.environment.get(\"port\");",
											"    const object = pm.environment.get(\"urlAgvJob\");",
											"    const url = `https://${host}:${port}/api/${object}/`;",
											"",
											"    return {",
											"        url: url + id,",
											"        method: 'GET',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'X-Foo': 'bar',",
											"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"        },  ",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({ key: 'this is json' })",
											"        }",
											"    };",
											"}",
											"",
											"",
											"pm.sendRequest(getRequest(pm.environment.get(\"agvJobId\")), (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "24122b9e-2199-47b4-8073-98b7848ccb3c",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}/{{agvJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvJob}}",
										"{{agvJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-cremation-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49aeb47d-6d22-4159-9425-9d2ecd926b97",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"agvJob_cremationWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}/{{agvJobId}}/{{urlCremationWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvJob}}",
										"{{agvJobId}}",
										"{{urlCremationWorkflow}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-collection-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e8e925e-7a3b-4a24-9e78-55849fcf7b40",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"agvJob_collectionWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvJob}}/{{agvJobId}}/{{urlCollectionWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvJob}}",
										"{{agvJobId}}",
										"{{urlCollectionWorkflow}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "printer-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "857a76be-ec39-4e0e-aa6b-0ee941ff4054",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56cb659b-e2aa-4ff3-a041-1df11cdedd35",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterJob}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ffaa677-0dfa-47b7-8f81-f81362c4778f",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}/{{printerJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterJob}}",
										"{{printerJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ab96631-b0ea-4a32-b737-74990d286377",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"function getRequest(id) {",
											"    const host = pm.environment.get(\"host\");",
											"    const port = pm.environment.get(\"port\");",
											"    const object = pm.environment.get(\"urlPrinterJob\");",
											"    const url = `https://${host}:${port}/api/${object}/`;",
											"",
											"    return {",
											"        url: url + id,",
											"        method: 'GET',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'X-Foo': 'bar',",
											"            'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"        },  ",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({ key: 'this is json' })",
											"        }",
											"    };",
											"}",
											"",
											"",
											"pm.sendRequest(getRequest(pm.environment.get(\"printerJobId\")), (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "18982f55-0802-4150-8bdc-55f91797d275",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}/{{printerJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterJob}}",
										"{{printerJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-user-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4936900c-d88b-4fb9-ae87-4611eab99699",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"printerJob_userId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}/{{printerJobId}}/{{urlUser}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterJob}}",
										"{{printerJobId}}",
										"{{urlUser}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-printer-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ebbcda6-7ff4-433f-b693-e3df5bb41ad8",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"printerJob_printerId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}/{{printerJobId}}/{{urlPrinterInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterJob}}",
										"{{printerJobId}}",
										"{{urlPrinterInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-collection-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1c1c5106-996a-45de-9dbb-0c9d57a871f6",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"printerJob_collectionWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterJob}}/{{printerJobId}}/{{urlCollectionWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterJob}}",
										"{{printerJobId}}",
										"{{urlCollectionWorkflow}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "printer-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c02bd4f8-5efa-4aab-8f55-79aafee391f8",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb231149-19a1-4d3a-97f1-093b46c1c10c",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dadaa447-4247-44d3-8cad-77688c4617db",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterInfo}}/{{printerId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterInfo}}",
										"{{printerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c96eff79-c271-49d1-a821-b094c811e0ba",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlPrinterInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"printerId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8adee202-7f57-4cbe-9e4b-b4db2cde49c4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrinterInfo}}/{{printerId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrinterInfo}}",
										"{{printerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "hearth-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a8cfd40d-3750-41a3-b8d1-5d73e41369b4",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3af58cab-fb61-44cb-a029-ebede771598a",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlHearthInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98bd37ba-c620-4ec2-8ebc-5bb34e39ca92",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}/{{hearthCremainId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlHearthInfo}}",
										"{{hearthCremainId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "768cbc38-ec29-405d-a0ae-7707a5992c28",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlHearthInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"hearthCremainId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6a8300b-5eb6-4f4d-b25b-ce53e004e858",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}/{{hearthCremainId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlHearthInfo}}",
										"{{hearthCremainId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-deceased-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "298e4777-1c96-48e7-b22a-476ceb5d9b5f",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"hearthCremain_deceasedId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlHearthInfo}}/{{hearthCremainId}}/{{urlDeceased}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlHearthInfo}}",
										"{{hearthCremainId}}",
										"{{urlDeceased}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "cremator-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4e8e3561-adfd-4b2f-9db8-b62e6b038fcf",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3cdf07ce-a8ef-4d32-bffd-3e48533cde63",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorJob}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a299a5f9-787e-4dc6-90d6-956f6241461e",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}/{{crematorJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorJob}}",
										"{{crematorJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cf1c7d04-c194-4b20-9aa5-4a810741f3d6",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlCrematorJob\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"crematorJobId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a57887e8-c7f1-4320-99b7-1bbf191a90ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}/{{crematorJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorJob}}",
										"{{crematorJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-cremation-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4c549a9-1f79-4d59-b0f6-7e82b8ed7cab",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();",
											"  const cremationWorkflowId = pm.environment.get(\"crematorJob_cremationWorkflowId\");",
											"  pm.expect(resJson.id).to.equal(cremationWorkflowId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}/{{crematorJobId}}/{{urlCremationWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorJob}}",
										"{{crematorJobId}}",
										"{{urlCremationWorkflow}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-cremator-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60034fd5-e151-492e-83a6-627ccdc50a52",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();",
											"  const crematorInfoId = pm.environment.get(\"crematorInfoId\");",
											"  pm.expect(resJson.id).to.equal(crematorInfoId);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCrematorJob}}/{{crematorJobId}}/{{urlCrematorInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCrematorJob}}",
										"{{crematorJobId}}",
										"{{urlCrematorInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "cremation-workflow-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d11ba1d4-0198-455a-9028-27616abee350",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a297b509-e414-47f6-836c-652c9127b4d2",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflow}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c2c5f8d-0149-4ca8-8927-2b075aa78d60",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}/{{cremationWorkflowId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflow}}",
										"{{cremationWorkflowId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "921b3f0b-6af8-46fa-b915-08d4f341c2c9",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlCremationWorkflow\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"cremationWorkflowId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "43ee1d4b-448b-45c3-94e0-75d745fc9f56",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}/{{cremationWorkflowId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflow}}",
										"{{cremationWorkflowId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-cremation-workflow-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adf7b675-12b7-407f-b4b5-6316753dd4bb",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  var resJson = pm.response.json();",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"cremationWorkflow_workflowInfoId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlCremationWorkflow}}/{{cremationWorkflowId}}/{{urlCremationWorkflowInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlCremationWorkflow}}",
										"{{cremationWorkflowId}}",
										"{{urlCremationWorkflowInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "scanner-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9866cf14-e331-48af-bc72-faa52b6f8327",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b46c8671-094b-40d6-8055-d99536051311",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerJob}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "59f06a4a-fbcc-4bc3-b94b-e2febdf70f8e",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/{{scannerJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerJob}}",
										"{{scannerJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "036c6e2d-47d0-44c2-9790-557110812f07",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlScannerJob\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"scannerJobId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cd0035a9-1a39-48a3-a430-08ad64daf385",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/{{scannerJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerJob}}",
										"{{scannerJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-cremation-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ae79d17-1f57-4846-868e-13af5e652094",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"scannerJob_cremationWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/{{scannerJobId}}/{{urlCremationWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerJob}}",
										"{{scannerJobId}}",
										"{{urlCremationWorkflow}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-collection-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b8c792e-be7b-4343-b9bc-ed56a839da78",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"scannerJob_collectionWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/{{scannerJobId}}/{{urlCollectionWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerJob}}",
										"{{scannerJobId}}",
										"{{urlCollectionWorkflow}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-scanner-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23e2235b-43ee-4d38-8178-4037afcca5b8",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"scannerJob_scannerId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerJob}}/{{scannerJobId}}/{{urlScannerInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerJob}}",
										"{{scannerJobId}}",
										"{{urlScannerInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "scanner-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b3c9e43-0cfe-47ee-bd57-261ed3fbf663",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b586aa8-84e4-4fa7-ae4c-204b452dc853",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f586db3-2fb3-463d-bd56-c9a17c405c28",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerInfo}}/{{scannerId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerInfo}}",
										"{{scannerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71dbb902-975f-4957-8c76-af717079a1b4",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlScannerInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"scannerId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd5948e3-349d-400c-81c7-e7a2315d6ce4",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlScannerInfo}}/{{scannerId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlScannerInfo}}",
										"{{scannerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "parking-bay-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43309bb3-d52f-45fb-98ca-02791b905a83",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8c00497-b6a5-4c08-80b6-27d6e1f49836",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlParkingBayInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlParkingBayInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d9c8633-f94e-49f5-b6e4-3f3e7b0b7cba",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlParkingBayInfo}}/{{parkingBayId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlParkingBayInfo}}",
										"{{parkingBayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a20ee9ef-b404-498b-8b74-5e734c3c7014",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlParkingBayInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"parkingBayId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal('DONE');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "086c4b70-c467-4f46-94a9-150d4830cfba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlParkingBayInfo}}/{{parkingBayId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlParkingBayInfo}}",
										"{{parkingBayId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-hearth-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "006a4700-f45b-4b0d-9bf1-c593db12936b",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"parkingBay_hearthId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlParkingBayInfo}}/{{parkingBayId}}/{{urlHearthInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlParkingBayInfo}}",
										"{{parkingBayId}}",
										"{{urlHearthInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "recipient-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbb122fb-ca05-4df0-9fb5-f16aa9e94341",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a2289b9-5423-4345-a0ea-d257e94c9b0d",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRecipientInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRecipientInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "14f2c094-92b2-4cd4-87dc-c7589ef1f574",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRecipientInfo}}/{{recipientId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRecipientInfo}}",
										"{{recipientId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6897080f-43c7-4f55-8a11-044e6c2bf518",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlRecipientInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"recipientId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.relationship).to.equal('father of deceased');        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6eccf97-f3f7-4fdb-bdbd-2bee076180f7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"relationship\": \"father of deceased\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRecipientInfo}}/{{recipientId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRecipientInfo}}",
										"{{recipientId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "locker-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaf99d38-b448-47e4-bffd-39bc5bd35fac",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a630bf2-383d-42ec-935c-82dde2b4e1df",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "54c6434e-03c9-4112-a8b2-9ed8b636efb7",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerInfo}}/{{lockerId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerInfo}}",
										"{{lockerId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef50b1c1-4fe3-4261-b857-6a0abc640e59",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlLockerInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"lockerId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.isUsed).to.equal(true);        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "102eac96-adf7-48cb-8eeb-e2f0eb727622",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"isUsed\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerInfo}}/{{lockerId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerInfo}}",
										"{{lockerId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "room-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ada25756-c4a6-417e-9f30-92a8f02e2718",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a964a6ee-39a8-4f05-b547-868b9176bbf9",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc8125e0-589a-4aa4-a415-fe01a760f94a",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomInfo}}/{{roomId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomInfo}}",
										"{{roomId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f4afd53-1140-4c64-9b62-e83bf878f7bf",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlRoomInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"roomId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "44fe1003-ee1e-46e1-8d6a-383c09feafc7",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomInfo}}/{{roomId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomInfo}}",
										"{{roomId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "room-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "01252cf1-4976-4d84-a6c9-3d523af11245",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a968fc0-3c6f-42cd-88a0-bbb7bccb9701",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomJob}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d716fd2b-4950-48a4-b962-406103e6350c",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}/{{roomJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomJob}}",
										"{{roomJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d7149f43-a5d0-4954-8601-cf78ea3fa60f",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlRoomJob\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"roomJobId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "af79b1c5-86c3-4493-bdb9-f195b56ba849",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}/{{roomJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomJob}}",
										"{{roomJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-room-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eb75d84-19a6-4144-9706-4e5a61ee355e",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"roomJob_roomId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}/{{roomJobId}}/{{urlRoomInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomJob}}",
										"{{roomJobId}}",
										"{{urlRoomInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-collection-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "272d5707-4516-4ed1-8716-68c0cc776d60",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"roomJob_collectionWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlRoomJob}}/{{roomJobId}}/{{urlCollectionWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlRoomJob}}",
										"{{roomJobId}}",
										"{{urlCollectionWorkflow}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "printing-history-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc619b5b-42f4-4869-8354-cd78dc47e9b3",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2239903f-de79-4d9b-b198-0756de79b8f8",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrintingHistory}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrintingHistory}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4381329-a310-47bf-b29d-e7774c59de84",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrintingHistory}}/{{printingHistoryId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrintingHistory}}",
										"{{printingHistoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c09bfcb0-0849-45c4-8067-9202256fb67c",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlPrintingHistory\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"printingHistoryId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.remarks).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a8fd94c4-2513-4961-bb29-6b9f9baf7e38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"remarks\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrintingHistory}}/{{printingHistoryId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrintingHistory}}",
										"{{printingHistoryId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-printer-job",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d89460e-f303-4025-b148-3076d7704e38",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"printingHistory_printerJobId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlPrintingHistory}}/{{printingHistoryId}}/{{urlPrinterJob}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlPrintingHistory}}",
										"{{printingHistoryId}}",
										"{{urlPrinterJob}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "button-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "246cc1eb-f387-4f3d-b859-7f2d514c5999",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fc34534-43e3-44f4-86e7-aeb69a2c21c9",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95039c6f-4784-476b-9aa2-2d60ec1420b6",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonInfo}}/{{buttonId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonInfo}}",
										"{{buttonId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba37a314-de57-4869-ba9d-ee6d7c724eb5",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlButtonInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"buttonId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3ce044a3-04ab-4a36-9a53-4392417b3917",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonInfo}}/{{buttonId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonInfo}}",
										"{{buttonId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "agv-station-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e45d07b-3ce0-4c31-b402-95aa98de13db",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "723fffcf-df76-48ca-8852-772bc1dbea36",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvStation}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvStation}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05ff2ce8-4137-4ab5-87f3-29d4e5492546",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvStation}}/{{agvStationId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvStation}}",
										"{{agvStationId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ba422f1-4e81-4705-9e4d-96af67e30a3c",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlAgvStation\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"agvStationId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "01d4c29c-b484-4260-9555-f7071de26459",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlAgvStation}}/{{agvStationId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlAgvStation}}",
										"{{agvStationId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "tv-info-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "91f72a41-d866-4c40-b7ea-3ae3dea40d85",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5fc5dd65-cd33-4e56-98ef-291bcdc6ae04",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlTvInfo}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlTvInfo}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bf8fc80-969b-4d8c-a2f4-228b829b28de",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlTvInfo}}/{{tvInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlTvInfo}}",
										"{{tvInfoId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f3f7be6-4f02-46a4-9f67-be816aa9c2ef",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlTvInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"tvInfoId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "26cf5094-7552-4664-be5c-6e97639c5819",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlTvInfo}}/{{tvInfoId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlTvInfo}}",
										"{{tvInfoId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "system-setting-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ad3995-7f6c-46ac-98b6-57a4ebe7c3b9",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90e5c289-ddbc-4d03-85e6-dda6c5e57ece",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlSystemSetting}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlSystemSetting}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e973842-7bad-4560-86d0-185b013bf2b2",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlSystemSetting}}/{{systemSettingId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlSystemSetting}}",
										"{{systemSettingId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d649443-1e46-4191-af26-c67e5e25b7b4",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlSystemSetting\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"systemSettingId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.printerTimeout).to.equal(0);        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ea97419e-883d-4698-a1d1-dbbe2cdb54f0",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"printerTimeout\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlSystemSetting}}/{{systemSettingId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlSystemSetting}}",
										"{{systemSettingId}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "button-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "201602c3-f17f-4dd8-9e13-1609e789d4c6",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b8fba8b-4259-4654-a87e-b6369c883625",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonJob}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonJob}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ffda538-bffc-44e5-aa1a-c6d9b59999d3",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonJob}}/{{buttonJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonJob}}",
										"{{buttonJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "286f0bd6-c5bd-41c1-b48a-c3fa2ba617a0",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlButtonInfo\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"buttonId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "19636aac-2ca8-4dee-9c36-2e1da49aa281",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonJob}}/{{buttonJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonJob}}",
										"{{buttonJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-button-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44c967b0-7688-4bd1-b452-c88b534932dc",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"buttonJob_buttonId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlButtonJob}}/{{buttonJobId}}/{{urlButtonInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlButtonJob}}",
										"{{buttonJobId}}",
										"{{urlButtonInfo}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "locker-job-controller",
					"item": [
						{
							"name": "enter-god-mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b867d20b-c58a-4429-a7ee-0e2668c73203",
										"exec": [
											"pm.test(\"should be successful\", function () {\r",
											"    var resJson = pm.response.json();    \r",
											"    pm.response.to.have.status(200);\r",
											"    pm.expect(resJson.token).not.eql(undefined);\r",
											"    pm.environment.set(\"jwt_token_login\", resJson.token)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"staffId\": \"{{staffId_secret}}\",\r\n    \"password\": \"{{password_secret}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLogin}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLogin}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "list-all-items",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f68f5c4c-ab92-453d-8e1a-da6d1a63c54f",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}/",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerJob}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58b8fc19-35c4-41d7-ab33-4a331b6a6145",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}/{{lockerJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerJob}}",
										"{{lockerJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-an-item",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00306663-15f7-41a3-81e1-5dc6bb08fcb6",
										"exec": [
											"const host = pm.environment.get(\"host\");",
											"const port = pm.environment.get(\"port\");",
											"const object = pm.environment.get(\"urlLockerJob\");",
											"const url = `https://${host}:${port}/api/${object}/`;",
											"const id = pm.environment.get(\"lockerJobId\");",
											"const getRequest = {    ",
											"    url: url + id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json',",
											"        'X-Foo': 'bar',",
											"        'Authorization': \"Bearer \" + pm.environment.get(\"jwt_token_login\")",
											"    },  ",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({ key: 'this is json' })",
											"    }    ",
											"}",
											"",
											"pm.test(\"receives no error from server\", function () {",
											"    pm.response.to.not.be.error;  ",
											"    pm.response.to.not.have.jsonBody('error');",
											"});",
											"",
											"pm.sendRequest(getRequest, (error, response) => {",
											"    pm.expect(response).to.be.a('object');",
											"    const body = response.json();",
											"    pm.test(\"new details are updated\", function () {",
											"        pm.expect(body.status).to.equal(\"DONE\");        ",
											"    });",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "898bd9bf-5c68-4bb1-a5ca-aff8c41c6435",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"status\": \"DONE\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}/{{lockerJobId}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerJob}}",
										"{{lockerJobId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-locker-info",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d433aa78-68c4-4812-bd72-6a608c457a76",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"lockerJob_lockerId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}/{{lockerJobId}}/{{urlLockerInfo}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerJob}}",
										"{{lockerJobId}}",
										"{{urlLockerInfo}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "retrieve-its-collection-workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84cb740a-9f88-4a78-9504-2bffc1e36cee",
										"exec": [
											"pm.test(\"should be successful\", function () {",
											"  pm.response.to.not.be.error;  ",
											"  pm.response.to.not.have.jsonBody('error');",
											"  const resJson = pm.response.json();  ",
											"  pm.expect(resJson.id).to.equal(pm.environment.get(\"lockerJob_collectionWorkflowId\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_token_login}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://{{host}}:{{port}}/api/{{urlLockerJob}}/{{lockerJobId}}/{{urlCollectionWorkflow}}",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"port": "{{port}}",
									"path": [
										"api",
										"{{urlLockerJob}}",
										"{{lockerJobId}}",
										"{{urlCollectionWorkflow}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "278a163e-4b2d-4ad3-b961-ab85b160a28e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c09b2d43-fb7b-496c-822f-ae7a9f368dfd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f22ae906-6039-4de9-8dea-e667490ff38e",
			"key": "staffId_secret",
			"value": ""
		},
		{
			"id": "8905984a-604e-420e-b9bb-bc9fd9e43c9b",
			"key": "password_secret",
			"value": ""
		},
		{
			"id": "3c6b291d-0939-4b5b-a410-e2d1d51f4268",
			"key": "host",
			"value": ""
		},
		{
			"id": "6ba784c5-d42b-4cf0-b83f-bc6198a9b385",
			"key": "port",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}